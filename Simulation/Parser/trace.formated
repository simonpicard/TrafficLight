State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.Initial pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerPedestrian.waitingTime<=0 TimerPedestrian.waitingTime-TimerEast.waitingTime<=0 TimerEast.waitingTime-TimerSouth.waitingTime<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-LightController1.x<=0 LightController1.x-PedestrianGeneratorEast.crossin<=0 

Transition: CarGeneratorEast.AcceptCar -> CarGeneratorEast.AcceptCar {carLight[location] != GREEN && queueIndex[location] != QUEUE_SIZE && location != W; carRequest!; queue[location][queueIndex[location]] = L, queueIndex[location]++;} LightController1.Initial -> LightController1.RequestEast {1; request[E]?; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.RequestEast pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerPedestrian.waitingTime<=0 TimerPedestrian.waitingTime-TimerEast.waitingTime<=0 TimerEast.waitingTime-TimerSouth.waitingTime<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-LightController1.x<=0 LightController1.x-PedestrianGeneratorEast.crossin<=0 

Transition: TimerEast.NotWaiting -> TimerEast.NotWaitingTooMuch {1; waiting?; waitingTime = 0;} LightController1.RequestEast -> LightController1._id3 {queueIndex[E] == 1; waiting[E]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1._id3 pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerPedestrian.waitingTime<=0 TimerPedestrian.waitingTime-TimerSouth.waitingTime<=0 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-LightController1.x<=0 LightController1.x-PedestrianGeneratorEast.crossin<=0 

Transition: LightController1._id3 -> LightController1.TakeDecision {1; 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.TakeDecision pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerPedestrian.waitingTime<=0 TimerPedestrian.waitingTime-TimerSouth.waitingTime<=0 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-LightController1.x<=0 LightController1.x-PedestrianGeneratorEast.crossin<=0 

Transition: LightController1.TakeDecision -> LightController1.CarCrossing {pedestrianCrossingButton == false && (queueIndex[E] != 0 || queueIndex[S] != 0 || queueIndex[W] != 0); 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarCrossing pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerPedestrian.waitingTime<=0 TimerPedestrian.waitingTime-TimerSouth.waitingTime<=0 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-LightController1.x<=0 LightController1.x-PedestrianGeneratorEast.crossin<=0 

Transition: CarGeneratorEast.AcceptCar -> CarGeneratorEast.CarCrossing {1; carLightGreen?; crossingTime = 0;} LightController1.CarCrossing -> LightController1.CarEastGreen {queueIndex[E] != 0; lightGreen[E]!; pedestrianLight = RED, carLight[E] = GREEN, carLight[S] = RED, carLight[W] = RED, x = 0;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.CarCrossing CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 1 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-t(0)<=3 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerPedestrian.waitingTime<=0 TimerPedestrian.waitingTime-TimerSouth.waitingTime<=0 TimerEast.waitingTime-LightController1.x<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-PedestrianGeneratorEast.crossin<=0 LightController1.x-CarGeneratorEast.crossingTime<=0 

Transition: LightController1.CarEastGreen -> LightController1.CarEastRed {x == CAR_CROSSING_TIME; 0; x = 0, carLight[E] = RED;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.CarCrossing CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-3 t(0)-CarGeneratorEast.crossingTime<=-3 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerPedestrian.waitingTime<=0 TimerPedestrian.waitingTime-TimerSouth.waitingTime<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-PedestrianGeneratorEast.crossin<=0 LightController1.x-t(0)<=0 

Transition: CarGeneratorEast.CarCrossing -> CarGeneratorEast.AcceptCar {crossingTime >= CAR_CROSSING_TIME; 0; queue[location][0] = queue[location][1], queueIndex[location]--;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-3 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-t(0)<=6 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerPedestrian.waitingTime<=0 TimerPedestrian.waitingTime-TimerSouth.waitingTime<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-PedestrianGeneratorEast.crossin<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: TimerEast.NotWaitingTooMuch -> TimerEast.NotWaiting {1; not_waiting?; 1;} LightController1.CarEastRed -> LightController1.Initial {x == CAR_CROSSING_TIME; notWaiting[E]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.Initial pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerPedestrian.waitingTime<=0 TimerPedestrian.waitingTime-TimerSouth.waitingTime<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-PedestrianGeneratorEast.crossin<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: PedestrianGeneratorEast.Empty -> PedestrianGeneratorEast.PushButton {1; pedestrianRequest!; pedestrianCrossingButton = true;} LightController1.Initial -> LightController1.RequestPedestrian {1; request[P]?; 1;} 

State: PedestrianGeneratorEast.PushButton CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.RequestPedestrian pedestrianCrossingButton = 1 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerPedestrian.waitingTime<=0 TimerPedestrian.waitingTime-TimerSouth.waitingTime<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-PedestrianGeneratorEast.crossin<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: TimerPedestrian.NotWaiting -> TimerPedestrian.NotWaitingTooMuch {1; waiting?; waitingTime = 0;} LightController1.RequestPedestrian -> LightController1._id6 {1; waiting[P]!; 1;} 

State: PedestrianGeneratorEast.PushButton CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaitingTooMuch TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1._id6 pedestrianCrossingButton = 1 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-t(0)<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-PedestrianGeneratorEast.crossin<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: LightController1._id6 -> LightController1.TakeDecision {1; 0; 1;} 

State: PedestrianGeneratorEast.PushButton CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaitingTooMuch TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.TakeDecision pedestrianCrossingButton = 1 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-t(0)<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-PedestrianGeneratorEast.crossin<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: PedestrianGeneratorEast.PushButton -> PedestrianGeneratorEast.Cross {1; pedestrianLightGreen?; crossingTime = 0;} LightController1.TakeDecision -> LightController1.PedestrianGreen {pedestrianCrossingButton == true; lightGreen[P]!; pedestrianLight = GREEN, carLight[E] = RED, carLight[S] = RED, carLight[W] = RED, x = 0;} 

State: PedestrianGeneratorEast.Cross CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaitingTooMuch TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.PedestrianGreen pedestrianCrossingButton = 1 pedestrianLight = 1 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-t(0)<=3 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=0 

Transition: PedestrianGeneratorEast.Cross -> PedestrianGeneratorEast.Empty {crossingTime >= PEDESTRIAN_CROSSING_TIME; 0; pedestrianCrossingButton = false;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaitingTooMuch TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.PedestrianGreen pedestrianCrossingButton = 0 pedestrianLight = 1 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-3 t(0)-CarGeneratorEast.crossingTime<=-9 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-t(0)<=3 

Transition: LightController1.PedestrianGreen -> LightController1.PedestrianRed {x == PEDESTRIAN_CROSSING_TIME; 0; x = 0, pedestrianLight = RED;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaitingTooMuch TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.PedestrianRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-3 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-t(0)<=6 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: TimerPedestrian.NotWaitingTooMuch -> TimerPedestrian.NotWaiting {1; not_waiting?; 1;} LightController1.PedestrianRed -> LightController1.Initial {x == PEDESTRIAN_CROSSING_TIME; notWaiting[P]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.Initial pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-6 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: CarGeneratorEast.AcceptCar -> CarGeneratorEast.AcceptCar {carLight[location] != GREEN && queueIndex[location] != QUEUE_SIZE && location != W; carRequest!; queue[location][queueIndex[location]] = L, queueIndex[location]++;} LightController1.Initial -> LightController1.RequestEast {1; request[E]?; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.RequestEast pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-6 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: TimerEast.NotWaiting -> TimerEast.NotWaitingTooMuch {1; waiting?; waitingTime = 0;} LightController1.RequestEast -> LightController1._id3 {queueIndex[E] == 1; waiting[E]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1._id3 pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-6 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: LightController1._id3 -> LightController1.TakeDecision {1; 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.TakeDecision pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-6 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: LightController1.TakeDecision -> LightController1.CarCrossing {pedestrianCrossingButton == false && (queueIndex[E] != 0 || queueIndex[S] != 0 || queueIndex[W] != 0); 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarCrossing pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-6 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorEast.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: CarGeneratorEast.AcceptCar -> CarGeneratorEast.CarCrossing {1; carLightGreen?; crossingTime = 0;} LightController1.CarCrossing -> LightController1.CarEastGreen {queueIndex[E] != 0; lightGreen[E]!; pedestrianLight = RED, carLight[E] = GREEN, carLight[S] = RED, carLight[W] = RED, x = 0;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.CarCrossing CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 1 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-t(0)<=3 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=0 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=0 

Transition: LightController1.CarEastGreen -> LightController1.CarEastRed {x == CAR_CROSSING_TIME; 0; x = 0, carLight[E] = RED;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.CarCrossing CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-9 t(0)-CarGeneratorEast.crossingTime<=-3 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-t(0)<=0 

Transition: CarGeneratorEast.CarCrossing -> CarGeneratorEast.AcceptCar {crossingTime >= CAR_CROSSING_TIME; 0; queue[location][0] = queue[location][1], queueIndex[location]--;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-3 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-t(0)<=6 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: TimerEast.NotWaitingTooMuch -> TimerEast.NotWaiting {1; not_waiting?; 1;} LightController1.CarEastRed -> LightController1.Initial {x == CAR_CROSSING_TIME; notWaiting[E]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.Initial pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: CarGeneratorWest.AcceptCar -> CarGeneratorWest.AcceptCar {carLight[location] != GREEN && queueIndex[location] != QUEUE_SIZE && location != S; carRequest!; queue[location][queueIndex[location]] = U, queueIndex[location]++;} LightController1.Initial -> LightController1.RequestWest {1; request[W]?; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.RequestWest pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-TimerWest.waitingTime<=0 TimerWest.waitingTime-CarGeneratorSouth.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: TimerWest.NotWaiting -> TimerWest.NotWaitingTooMuch {1; waiting?; waitingTime = 0;} LightController1.RequestWest -> LightController1._id5 {queueIndex[W] == 1; waiting[W]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1._id5 pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-t(0)<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: LightController1._id5 -> LightController1.TakeDecision {1; 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1.TakeDecision pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-t(0)<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: LightController1.TakeDecision -> LightController1.CarCrossing {pedestrianCrossingButton == false && (queueIndex[E] != 0 || queueIndex[S] != 0 || queueIndex[W] != 0); 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1.CarCrossing pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-CarGeneratorWest.crossingTime<=0 CarGeneratorWest.crossingTime-TimerSouth.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-t(0)<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: CarGeneratorWest.AcceptCar -> CarGeneratorWest.CarCrossing {1; carLightGreen?; crossingTime = 0;} LightController1.CarCrossing -> LightController1.CarWestGreen {!(queueIndex[E] != 0 || queueIndex[E] != 0) && queueIndex[W] != 0; lightGreen[W]!; pedestrianLight = RED, carLight[E] = RED, carLight[S] = RED, carLight[W] = GREEN, x = 0;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.CarCrossing TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1.CarWestGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 1 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-t(0)<=3 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=0 LightController1.x-CarGeneratorWest.crossingTime<=0 

Transition: CarGeneratorWest.CarCrossing -> CarGeneratorWest.AcceptCar {crossingTime >= CAR_CROSSING_TIME; 0; queue[location][0] = queue[location][1], queueIndex[location]--;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1.CarWestGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 1 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-9 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-3 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=0 LightController1.x-t(0)<=3 

Transition: LightController1.CarWestGreen -> LightController1.CarWestRed {x == CAR_CROSSING_TIME; 0; x = 0, carLight[W] = RED;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1.CarWestRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-3 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-t(0)<=6 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: TimerWest.NotWaitingTooMuch -> TimerWest.NotWaiting {1; not_waiting?; 1;} LightController1.CarWestRed -> LightController1.Initial {x == CAR_CROSSING_TIME; notWaiting[W]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.Initial pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-6 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: CarGeneratorEast.AcceptCar -> CarGeneratorEast.AcceptCar {carLight[location] != GREEN && queueIndex[location] != QUEUE_SIZE && location != W; carRequest!; queue[location][queueIndex[location]] = L, queueIndex[location]++;} LightController1.Initial -> LightController1.RequestEast {1; request[E]?; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.RequestEast pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-6 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: TimerEast.NotWaiting -> TimerEast.NotWaitingTooMuch {1; waiting?; waitingTime = 0;} LightController1.RequestEast -> LightController1._id3 {queueIndex[E] == 1; waiting[E]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1._id3 pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-6 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: LightController1._id3 -> LightController1.TakeDecision {1; 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.TakeDecision pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-6 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: LightController1.TakeDecision -> LightController1.CarCrossing {pedestrianCrossingButton == false && (queueIndex[E] != 0 || queueIndex[S] != 0 || queueIndex[W] != 0); 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarCrossing pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-6 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: CarGeneratorEast.AcceptCar -> CarGeneratorEast.CarCrossing {1; carLightGreen?; crossingTime = 0;} LightController1.CarCrossing -> LightController1.CarEastGreen {queueIndex[E] != 0; lightGreen[E]!; pedestrianLight = RED, carLight[E] = GREEN, carLight[S] = RED, carLight[W] = RED, x = 0;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.CarCrossing CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 1 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-t(0)<=3 CarGeneratorEast.crossingTime-CarGeneratorWest.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-PedestrianGeneratorEast.crossin<=-12 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=0 

Transition: CarGeneratorEast.CarCrossing -> CarGeneratorEast.AcceptCar {crossingTime >= CAR_CROSSING_TIME; 0; queue[location][0] = queue[location][1], queueIndex[location]--;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 1 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-3 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-9 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-PedestrianGeneratorEast.crossin<=-12 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-t(0)<=3 

Transition: LightController1.CarEastGreen -> LightController1.CarEastRed {x == CAR_CROSSING_TIME; 0; x = 0, carLight[E] = RED;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-3 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-t(0)<=6 CarGeneratorEast.crossingTime-CarGeneratorWest.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-PedestrianGeneratorEast.crossin<=-12 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: TimerEast.NotWaitingTooMuch -> TimerEast.NotWaiting {1; not_waiting?; 1;} LightController1.CarEastRed -> LightController1.Initial {x == CAR_CROSSING_TIME; notWaiting[E]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.Initial pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorWest.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-PedestrianGeneratorEast.crossin<=-12 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: CarGeneratorWest.AcceptCar -> CarGeneratorWest.AcceptCar {carLight[location] != GREEN && queueIndex[location] != QUEUE_SIZE && location != S; carRequest!; queue[location][queueIndex[location]] = U, queueIndex[location]++;} LightController1.Initial -> LightController1.RequestWest {1; request[W]?; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.RequestWest pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorWest.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-PedestrianGeneratorEast.crossin<=-12 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: TimerWest.NotWaiting -> TimerWest.NotWaitingTooMuch {1; waiting?; waitingTime = 0;} LightController1.RequestWest -> LightController1._id5 {queueIndex[W] == 1; waiting[W]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1._id5 pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorWest.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-PedestrianGeneratorEast.crossin<=-12 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-t(0)<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: LightController1._id5 -> LightController1.TakeDecision {1; 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1.TakeDecision pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorWest.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-PedestrianGeneratorEast.crossin<=-12 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-t(0)<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: LightController1.TakeDecision -> LightController1.CarCrossing {pedestrianCrossingButton == false && (queueIndex[E] != 0 || queueIndex[S] != 0 || queueIndex[W] != 0); 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1.CarCrossing pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorWest.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-PedestrianGeneratorEast.crossin<=-12 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-t(0)<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: CarGeneratorWest.AcceptCar -> CarGeneratorWest.CarCrossing {1; carLightGreen?; crossingTime = 0;} LightController1.CarCrossing -> LightController1.CarWestGreen {!(queueIndex[E] != 0 || queueIndex[E] != 0) && queueIndex[W] != 0; lightGreen[W]!; pedestrianLight = RED, carLight[E] = RED, carLight[S] = RED, carLight[W] = GREEN, x = 0;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.CarCrossing TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1.CarWestGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 1 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-18 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-t(0)<=3 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=0 LightController1.x-CarGeneratorWest.crossingTime<=0 

Transition: LightController1.CarWestGreen -> LightController1.CarWestRed {x == CAR_CROSSING_TIME; 0; x = 0, carLight[W] = RED;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.CarCrossing TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1.CarWestRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 1 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 1 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-9 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-3 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-18 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-t(0)<=0 

Transition: CarGeneratorWest.CarCrossing -> CarGeneratorWest.AcceptCar {crossingTime >= CAR_CROSSING_TIME; 0; queue[location][0] = queue[location][1], queueIndex[location]--;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaitingTooMuch LightController1.CarWestRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-3 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-18 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-t(0)<=6 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: TimerWest.NotWaitingTooMuch -> TimerWest.NotWaiting {1; not_waiting?; 1;} LightController1.CarWestRed -> LightController1.Initial {x == CAR_CROSSING_TIME; notWaiting[W]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.Initial pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-6 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-18 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: PedestrianGeneratorEast.Empty -> PedestrianGeneratorEast.PushButton {1; pedestrianRequest!; pedestrianCrossingButton = true;} LightController1.Initial -> LightController1.RequestPedestrian {1; request[P]?; 1;} 

State: PedestrianGeneratorEast.PushButton CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.RequestPedestrian pedestrianCrossingButton = 1 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-6 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-18 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: TimerPedestrian.NotWaiting -> TimerPedestrian.NotWaitingTooMuch {1; waiting?; waitingTime = 0;} LightController1.RequestPedestrian -> LightController1._id6 {1; waiting[P]!; 1;} 

State: PedestrianGeneratorEast.PushButton CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaitingTooMuch TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1._id6 pedestrianCrossingButton = 1 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-6 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-18 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-t(0)<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: LightController1._id6 -> LightController1.TakeDecision {1; 0; 1;} 

State: PedestrianGeneratorEast.PushButton CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaitingTooMuch TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.TakeDecision pedestrianCrossingButton = 1 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-6 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorSouth.crossingTime<=-6 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-18 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-t(0)<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-LightController1.x<=3 LightController1.x-CarGeneratorWest.crossingTime<=-3 

Transition: PedestrianGeneratorEast.PushButton -> PedestrianGeneratorEast.Cross {1; pedestrianLightGreen?; crossingTime = 0;} LightController1.TakeDecision -> LightController1.PedestrianGreen {pedestrianCrossingButton == true; lightGreen[P]!; pedestrianLight = GREEN, carLight[E] = RED, carLight[S] = RED, carLight[W] = RED, x = 0;} 

State: PedestrianGeneratorEast.Cross CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaitingTooMuch TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.PedestrianGreen pedestrianCrossingButton = 1 pedestrianLight = 1 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-t(0)<=3 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-24 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=0 

Transition: LightController1.PedestrianGreen -> LightController1.PedestrianRed {x == PEDESTRIAN_CROSSING_TIME; 0; x = 0, pedestrianLight = RED;} 

State: PedestrianGeneratorEast.Cross CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaitingTooMuch TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.PedestrianRed pedestrianCrossingButton = 1 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-3 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=-9 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-24 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-t(0)<=0 

Transition: PedestrianGeneratorEast.Cross -> PedestrianGeneratorEast.Empty {crossingTime >= PEDESTRIAN_CROSSING_TIME; 0; pedestrianCrossingButton = false;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaitingTooMuch TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.PedestrianRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-3 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-t(0)<=6 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-24 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: TimerPedestrian.NotWaitingTooMuch -> TimerPedestrian.NotWaiting {1; not_waiting?; 1;} LightController1.PedestrianRed -> LightController1.Initial {x == PEDESTRIAN_CROSSING_TIME; notWaiting[P]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.Initial pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-6 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-24 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: CarGeneratorSouth.AcceptCar -> CarGeneratorSouth.AcceptCar {carLight[location] != GREEN && queueIndex[location] != QUEUE_SIZE && location != E; carRequest!; queue[location][queueIndex[location]] = R, queueIndex[location]++;} LightController1.Initial -> LightController1.RequestSouth {1; request[S]?; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.RequestSouth pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 2 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 1 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-6 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-24 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: TimerSouth.NotWaiting -> TimerSouth.NotWaitingTooMuch {1; waiting?; waitingTime = 0;} LightController1.RequestSouth -> LightController1._id4 {queueIndex[S] == 1; waiting[S]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaitingTooMuch TimerWest.NotWaiting LightController1._id4 pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 2 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 1 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-6 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-24 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-t(0)<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: LightController1._id4 -> LightController1.TakeDecision {1; 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaitingTooMuch TimerWest.NotWaiting LightController1.TakeDecision pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 2 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 1 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-6 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-24 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-t(0)<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: LightController1.TakeDecision -> LightController1.CarCrossing {pedestrianCrossingButton == false && (queueIndex[E] != 0 || queueIndex[S] != 0 || queueIndex[W] != 0); 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaitingTooMuch TimerWest.NotWaiting LightController1.CarCrossing pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 2 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 1 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-6 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-24 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-LightController1.x<=3 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-t(0)<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-PedestrianGeneratorEast.crossin<=-3 

Transition: CarGeneratorSouth.AcceptCar -> CarGeneratorSouth.CarCrossing {1; carLightGreen?; crossingTime = 0;} LightController1.CarCrossing -> LightController1.CarSouthGreen {!(queueIndex[E] != 0) && queueIndex[S] != 0; lightGreen[S]!; pedestrianLight = RED, carLight[E] = RED, carLight[S] = GREEN, carLight[W] = RED, x = 0;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.CarCrossing CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaitingTooMuch TimerWest.NotWaiting LightController1.CarSouthGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 1 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 2 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 1 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-t(0)<=3 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-LightController1.x<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorSouth.crossingTime<=0 

Transition: CarGeneratorSouth.CarCrossing -> CarGeneratorSouth.AcceptCar {crossingTime >= CAR_CROSSING_TIME; 0; queue[location][0] = queue[location][1], queueIndex[location]--;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaitingTooMuch TimerWest.NotWaiting LightController1.CarSouthGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 1 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=-9 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=-3 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-LightController1.x<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-t(0)<=3 

Transition: LightController1.CarSouthGreen -> LightController1.CarSouthRed {x == CAR_CROSSING_TIME; 0; x = 0, carLight[S] = RED;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaitingTooMuch TimerWest.NotWaiting LightController1.CarSouthRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=-3 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-t(0)<=6 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-LightController1.x<=3 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorSouth.crossingTime<=-3 

Transition: TimerSouth.NotWaitingTooMuch -> TimerSouth.NotWaiting {1; not_waiting?; 1;} LightController1.CarSouthRed -> LightController1.Initial {x == CAR_CROSSING_TIME; notWaiting[S]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.Initial pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=-6 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-LightController1.x<=3 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorSouth.crossingTime<=-3 

Transition: CarGeneratorEast.AcceptCar -> CarGeneratorEast.AcceptCar {carLight[location] != GREEN && queueIndex[location] != QUEUE_SIZE && location != S; carRequest!; queue[location][queueIndex[location]] = U, queueIndex[location]++;} LightController1.Initial -> LightController1.RequestEast {1; request[E]?; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.RequestEast pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 1 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=-6 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-LightController1.x<=3 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorSouth.crossingTime<=-3 

Transition: TimerEast.NotWaiting -> TimerEast.NotWaitingTooMuch {1; waiting?; waitingTime = 0;} LightController1.RequestEast -> LightController1._id3 {queueIndex[E] == 1; waiting[E]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1._id3 pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 1 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=-6 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-LightController1.x<=3 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorSouth.crossingTime<=-3 

Transition: LightController1._id3 -> LightController1.TakeDecision {1; 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.TakeDecision pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 1 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=-6 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-LightController1.x<=3 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorSouth.crossingTime<=-3 

Transition: LightController1.TakeDecision -> LightController1.CarCrossing {pedestrianCrossingButton == false && (queueIndex[E] != 0 || queueIndex[S] != 0 || queueIndex[W] != 0); 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarCrossing pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 1 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=-6 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-t(0)<=0 TimerSouth.waitingTime-LightController1.x<=3 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorSouth.crossingTime<=-3 

Transition: CarGeneratorEast.AcceptCar -> CarGeneratorEast.CarCrossing {1; carLightGreen?; crossingTime = 0;} LightController1.CarCrossing -> LightController1.CarEastGreen {queueIndex[E] != 0; lightGreen[E]!; pedestrianLight = RED, carLight[E] = GREEN, carLight[S] = RED, carLight[W] = RED, x = 0;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.CarCrossing CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 1 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 1 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 1 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-t(0)<=3 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=0 

Transition: CarGeneratorEast.CarCrossing -> CarGeneratorEast.AcceptCar {crossingTime >= CAR_CROSSING_TIME; 0; queue[location][0] = queue[location][1], queueIndex[location]--;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 1 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-3 t(0)-CarGeneratorSouth.crossingTime<=-9 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=0 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-t(0)<=3 

Transition: LightController1.CarEastGreen -> LightController1.CarEastRed {x == CAR_CROSSING_TIME; 0; x = 0, carLight[E] = RED;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaitingTooMuch TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.CarEastRed pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-3 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-t(0)<=6 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: TimerEast.NotWaitingTooMuch -> TimerEast.NotWaiting {1; not_waiting?; 1;} LightController1.CarEastRed -> LightController1.Initial {x == CAR_CROSSING_TIME; notWaiting[E]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.Initial pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 0 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: CarGeneratorSouth.AcceptCar -> CarGeneratorSouth.AcceptCar {carLight[location] != GREEN && queueIndex[location] != QUEUE_SIZE && location != W; carRequest!; queue[location][queueIndex[location]] = L, queueIndex[location]++;} LightController1.Initial -> LightController1.RequestSouth {1; request[S]?; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaiting TimerWest.NotWaiting LightController1.RequestSouth pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 1 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-CarGeneratorSouth.crossingTime<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: TimerSouth.NotWaiting -> TimerSouth.NotWaitingTooMuch {1; waiting?; waitingTime = 0;} LightController1.RequestSouth -> LightController1._id4 {queueIndex[S] == 1; waiting[S]!; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaitingTooMuch TimerWest.NotWaiting LightController1._id4 pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 1 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-t(0)<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: LightController1._id4 -> LightController1.TakeDecision {1; 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaitingTooMuch TimerWest.NotWaiting LightController1.TakeDecision pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 1 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-t(0)<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: LightController1.TakeDecision -> LightController1.CarCrossing {pedestrianCrossingButton == false && (queueIndex[E] != 0 || queueIndex[S] != 0 || queueIndex[W] != 0); 0; 1;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.AcceptCar CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaitingTooMuch TimerWest.NotWaiting LightController1.CarCrossing pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 0 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 1 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=-6 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-CarGeneratorSouth.crossingTime<=-6 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-PedestrianGeneratorEast.crossin<=-6 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-LightController1.x<=3 TimerSouth.waitingTime-t(0)<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorEast.crossingTime<=-3 

Transition: CarGeneratorSouth.AcceptCar -> CarGeneratorSouth.CarCrossing {1; carLightGreen?; crossingTime = 0;} LightController1.CarCrossing -> LightController1.CarSouthGreen {!(queueIndex[E] != 0) && queueIndex[S] != 0; lightGreen[S]!; pedestrianLight = RED, carLight[E] = RED, carLight[S] = GREEN, carLight[W] = RED, x = 0;} 

State: PedestrianGeneratorEast.Empty CarGeneratorEast.AcceptCar CarGeneratorSouth.CarCrossing CarGeneratorWest.AcceptCar TimerPedestrian.NotWaiting TimerEast.NotWaiting TimerSouth.NotWaitingTooMuch TimerWest.NotWaiting LightController1.CarSouthGreen pedestrianCrossingButton = 0 pedestrianLight = 0 carLight[0] = 0 carLight[1] = 1 carLight[2] = 0 queue[0][0] = 0 queue[0][1] = 0 queue[1][0] = 0 queue[1][1] = 0 queue[2][0] = 0 queue[2][1] = 0 queueIndex[0] = 0 queueIndex[1] = 1 queueIndex[2] = 0 isUrgent[0] = 0 isUrgent[1] = 0 isUrgent[2] = 0 isUrgent[3] = 0 CarGeneratorEast.location = 0 CarGeneratorSouth.location = 1 CarGeneratorWest.location = 2 t(0)-PedestrianGeneratorEast.crossin<=0 t(0)-CarGeneratorEast.crossingTime<=0 t(0)-CarGeneratorSouth.crossingTime<=0 t(0)-CarGeneratorWest.crossingTime<=0 t(0)-TimerPedestrian.waitingTime<=0 t(0)-TimerEast.waitingTime<=0 t(0)-TimerSouth.waitingTime<=0 t(0)-TimerWest.waitingTime<=0 t(0)-LightController1.x<=0 PedestrianGeneratorEast.crossin-CarGeneratorWest.crossingTime<=-6 PedestrianGeneratorEast.crossin-TimerPedestrian.waitingTime<=0 CarGeneratorEast.crossingTime-PedestrianGeneratorEast.crossin<=-12 CarGeneratorEast.crossingTime-TimerEast.waitingTime<=0 CarGeneratorSouth.crossingTime-t(0)<=3 CarGeneratorSouth.crossingTime-CarGeneratorEast.crossingTime<=-6 CarGeneratorSouth.crossingTime-TimerSouth.waitingTime<=0 CarGeneratorWest.crossingTime-TimerWest.waitingTime<=0 TimerPedestrian.waitingTime-PedestrianGeneratorEast.crossin<=0 TimerEast.waitingTime-CarGeneratorEast.crossingTime<=0 TimerSouth.waitingTime-LightController1.x<=0 TimerWest.waitingTime-CarGeneratorWest.crossingTime<=0 LightController1.x-CarGeneratorSouth.crossingTime<=0 
