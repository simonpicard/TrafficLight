<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
const int E=0, S=1, W=2, N=3;
const int RED=0, ORANGE=1, GREEN=2;
const int L=0, U=1, R=2;
bool pedestrianCrossingButton = false;
int[0,2] pedestrianLight = RED;
int[0,2] carLight[3] = {RED, RED, RED};
const int QUEUE_SIZE=3;
int[0,3] queue[3][QUEUE_SIZE];</declaration><template><name x="5" y="5">PedestrianGenerator</name><declaration>clock crossingTime;
int MIN_CROSSING_TIME=3, MAX_CROSSING_TIME=5;</declaration><location id="id0" x="8" y="-112"><name x="32" y="-128">Cross</name><label kind="invariant" x="32" y="-112">crossingTime&lt;=MAX_CROSSING_TIME</label></location><location id="id1" x="-304" y="-112"><name x="-320" y="-144">Wait</name><label kind="invariant" x="-352" y="-96">pedestrianLight == RED</label></location><location id="id2" x="-584" y="-112"><name x="-632" y="-152">PushButton</name><committed/></location><location id="id3" x="-976" y="-112"><name x="-992" y="-152">Empty</name></location><init ref="id3"/><transition controllable="false" action="addPedestrian"><source ref="id3"/><target ref="id2"/></transition><transition controllable="false" action=""><source ref="id0"/><target ref="id3"/><label kind="guard" x="-928" y="80">crossingTime&gt;=MIN_CROSSING_TIME</label><label kind="assignment" x="-928" y="96">pedestrianCrossingButton = false</label><nail x="-808" y="72"/></transition><transition action="removePedestrian1"><source ref="id2"/><target ref="id0"/><label kind="guard" x="-416" y="-304">pedestrianLight == GREEN</label><label kind="assignment" x="-360" y="-288">crossingTime=0</label><nail x="-296" y="-272"/></transition><transition action="removePedestrian2"><source ref="id1"/><target ref="id0"/><label kind="guard" x="-280" y="-144">pedestrianLight == GREEN</label><label kind="assignment" x="-208" y="-128">crossingTime=0</label></transition><transition action=""><source ref="id2"/><target ref="id1"/><label kind="guard" x="-576" y="-112">pedestrianLight == RED</label><label kind="assignment" x="-624" y="-96">pedestrianCrossingButton = true</label></transition></template><template><name>LightController</name><parameter>chan &amp;toggleRed[3], chan &amp;toggleGreen[3]</parameter><location id="id4" x="-216" y="-24"><name x="-226" y="-54">Initial</name></location><init ref="id4"/><transition action=""><source ref="id4"/><target ref="id4"/><label kind="select" x="-624" y="-216">i : int[0,2]</label><label kind="synchronisation" x="-632" y="-192">toggleRed[i]!</label><nail x="-544" y="-128"/><nail x="-480" y="-216"/></transition><transition action=""><source ref="id4"/><target ref="id4"/><label kind="select" x="-448" y="240">i : int[0,2]</label><label kind="synchronisation" x="-456" y="264">toggleGreen[i]!</label><nail x="-304" y="272"/><nail x="-384" y="224"/></transition><transition action=""><source ref="id4"/><target ref="id4"/><label kind="assignment" x="112" y="-120">pedestrianLight=RED</label><nail x="88" y="-136"/><nail x="96" y="-72"/></transition><transition action=""><source ref="id4"/><target ref="id4"/><label kind="guard" x="-344" y="-344">pedestrianCrossingButton</label><label kind="assignment" x="-344" y="-328">pedestrianLight=GREEN</label><nail x="-248" y="-304"/><nail x="-176" y="-304"/></transition></template><template><name>Light</name><parameter>chan &amp;toggleRed, chan &amp;toggleGreen, int[0,3] location</parameter><declaration>int SWITCHING_TIME = 1;
clock x;</declaration><location id="id5" x="-944" y="56"><name x="-920" y="48">Green</name></location><location id="id6" x="-944" y="-152"><name x="-920" y="-160">Orange</name><label kind="invariant" x="-920" y="-144">x&lt;=SWITCHING_TIME</label></location><location id="id7" x="-944" y="-368"><name x="-920" y="-376">Red</name></location><init ref="id7"/><transition action="toggleGreen"><source ref="id7"/><target ref="id5"/><label kind="synchronisation" x="-1160" y="-160">toggleGreen?</label><label kind="assignment" x="-1248" y="-144">carLight[location]=GREEN</label><nail x="-1056" y="-144"/></transition><transition controllable="false" action="toggleRed"><source ref="id6"/><target ref="id7"/><label kind="guard" x="-928" y="-272">x==SWITCHING_TIME</label><label kind="assignment" x="-928" y="-256">carLight[location]=RED</label></transition><transition action="toggleOrange"><source ref="id5"/><target ref="id6"/><label kind="synchronisation" x="-936" y="-64">toggleRed?</label><label kind="assignment" x="-936" y="-48">x=0, carLight[location]=ORANGE</label></transition></template><template><name>CarGenerator</name><parameter>int[0,3] location</parameter><declaration>int[0,3] queueIndex=0;
clock crossingTime;
const int MIN_CROSSING_TIME=3, MAX_CROSSING_TIME=5;</declaration><location id="id8" x="-688" y="-192"><name x="-712" y="-224">CarCrossing</name><label kind="invariant" x="-672" y="-192">crossingTime&lt;=MAX_CROSSING_TIME</label></location><location id="id9" x="-1168" y="-192"><name x="-1200" y="-168">AcceptCar</name></location><init ref="id9"/><transition controllable="false" action=""><source ref="id8"/><target ref="id9"/><label kind="guard" x="-936" y="-32">crossingTime&gt;=MIN_CROSSING_TIME</label><nail x="-736" y="-48"/><nail x="-1120" y="-112"/></transition><transition action="removeCar"><source ref="id9"/><target ref="id8"/><label kind="guard" x="-1064" y="-176">carLight[location]==GREEN &amp;&amp; queueIndex&gt;0</label><label kind="assignment" x="-1048" y="-160">queue[location][0]=queue[location][1],
queue[location][1]=queue[location][2],
queueIndex--,
crossingTime=0</label></transition><transition controllable="false" action="addCarLeft"><source ref="id9"/><target ref="id9"/><label kind="guard" x="-1856" y="-184">carLight[location]!=GREEN &amp;&amp; queueIndex!=QUEUE_SIZE &amp;&amp; location != W</label><label kind="assignment" x="-1592" y="-168">queue[location][queueIndex]=L,
queueIndex++</label><nail x="-1288" y="-216"/><nail x="-1272" y="-128"/></transition><transition controllable="false" action="addCarUp"><source ref="id9"/><target ref="id9"/><label kind="guard" x="-1808" y="-288">carLight[location]!=GREEN &amp;&amp; queueIndex!=QUEUE_SIZE &amp;&amp; location != S</label><label kind="assignment" x="-1560" y="-272">queue[location][queueIndex]=U,
queueIndex++</label><nail x="-1216" y="-312"/><nail x="-1280" y="-240"/></transition><transition controllable="false" action="addCarRight"><source ref="id9"/><target ref="id9"/><label kind="guard" x="-1336" y="-376">carLight[location]!=GREEN &amp;&amp; queueIndex!=QUEUE_SIZE  &amp;&amp; location != E</label><label kind="assignment" x="-1264" y="-360">queue[location][queueIndex]=R,
queueIndex++</label><nail x="-1200" y="-320"/><nail x="-1088" y="-320"/></transition></template><system>chan toggleRed[3], toggleGreen[3];

PedestrianGeneratorNorth = PedestrianGenerator();

CarGeneratorEast = CarGenerator(E);
CarGeneratorSouth = CarGenerator(S);
CarGeneratorWest = CarGenerator(W);

LightController1 = LightController(toggleRed, toggleGreen) ;

LightEast = Light(toggleRed[E], toggleGreen[E], E);
LightSouth = Light(toggleRed[S], toggleGreen[S], S);
LightWest = Light(toggleRed[W], toggleGreen[W], W);

system PedestrianGenerator,
CarGeneratorEast, CarGeneratorSouth, CarGeneratorWest,
LightController1,
LightEast, LightSouth, LightWest;</system></nta>