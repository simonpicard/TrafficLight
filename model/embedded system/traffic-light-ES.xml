<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
const int W=0, S=1, E=2;
const int L=0, U=1, R=2;
const bool RED=false, GREEN=true;
bool pedestrianCrossingButton = false;
bool pedestrianLight = RED;
bool carLight[3] = {RED, RED, RED};
const int QUEUE_SIZE=2;
int[0,2] queue[3][QUEUE_SIZE];</declaration><template><name x="5" y="5">PedestrianGenerator</name><parameter>chan &amp;go</parameter><declaration>clock crossingTime, waitingTime;
int CROSSING_TIME=1, MAX_WAITING_TIME = 10;</declaration><location id="id0" x="-248" y="-312" color="#ff0000"><name x="-258" y="-342">Broken</name></location><location id="id1" x="8" y="-112"><name x="32" y="-128">Cross</name><label kind="invariant" x="32" y="-112">crossingTime&lt;=CROSSING_TIME</label></location><location id="id2" x="-584" y="-112"><name x="-632" y="-152">PushButton</name><label kind="invariant" x="-664" y="-88">waitingTime &lt;= MAX_WAITING_TIME</label></location><location id="id3" x="-976" y="-112"><name x="-992" y="-152">Empty</name></location><init ref="id3"/><transition controllable="false" action=""><source ref="id2"/><target ref="id0"/><label kind="guard" x="-528" y="-296">waitingTime &gt;= MAX_WAITING_TIME</label></transition><transition controllable="false" action="addPedestrian"><source ref="id3"/><target ref="id2"/><label kind="assignment" x="-840" y="-112">pedestrianCrossingButton = true,
waitingTime = 0</label></transition><transition controllable="false" action=""><source ref="id1"/><target ref="id3"/><label kind="guard" x="-928" y="80">crossingTime&gt;=CROSSING_TIME</label><label kind="assignment" x="-928" y="96">pedestrianCrossingButton = false,
pedestrianLight = RED</label><nail x="-808" y="72"/></transition><transition action="removePedestrian1"><source ref="id2"/><target ref="id1"/><label kind="synchronisation" x="-328" y="-168">go?</label><label kind="assignment" x="-360" y="-144">crossingTime=0</label></transition></template><template><name>LightController</name><parameter>chan &amp;carToggleGreen[3], chan &amp;carToggleRed[3], chan &amp;go</parameter><declaration>clock tick;
int SWITCHING_TIME = 1;

bool notAllRed(){
	return pedestrianLight || carLight[W] || carLight[S] || carLight[E];
}</declaration><location id="id4" x="-856" y="64"><label kind="invariant" x="-866" y="79">tick &lt;= 1</label></location><location id="id5" x="-216" y="-24"><name x="-226" y="-54">initial</name></location><init ref="id5"/><transition action=""><source ref="id4"/><target ref="id5"/><label kind="guard" x="-624" y="-264">tick &gt;= SWITCHING_TIME</label><label kind="assignment" x="-616" y="-288">tick = 0</label><nail x="-848" y="24"/><nail x="-848" y="-296"/><nail x="-360" y="-288"/></transition><transition action=""><source ref="id5"/><target ref="id4"/><label kind="select" x="-596" y="-25">i : int[0,2]</label><label kind="guard" x="-592" y="-8">carLight[i] == GREEN</label><label kind="synchronisation" x="-596" y="5">carToggleRed[i]!</label><label kind="assignment" x="-596" y="20">carLight[i]=RED,
tick = 0</label></transition><transition action=""><source ref="id5"/><target ref="id4"/><label kind="guard" x="-576" y="-176">pedestrianCrossingButton</label><label kind="synchronisation" x="-480" y="-136">go!</label><label kind="assignment" x="-576" y="-152">pedestrianLight=GREEN,
tick = 0</label><nail x="-568" y="-120"/></transition><transition action=""><source ref="id5"/><target ref="id4"/><label kind="select" x="-656" y="168">i : int[0,2]</label><label kind="guard" x="-656" y="184">carLight[i]==RED</label><label kind="synchronisation" x="-656" y="200">carToggleGreen[i]!</label><label kind="assignment" x="-656" y="216">carLight[i]=GREEN,
tick = 0</label><nail x="-496" y="192"/></transition></template><template><name>CarGeneratorNew</name><parameter>int[0,2] location, chan &amp;toggleGreen, chan &amp;toggleRed</parameter><declaration>int[0,2] queueIndex=0;
clock crossingTime, waitingTime;
const int CROSSING_TIME=1, MAX_WAITING_TIME = 10;</declaration><location id="id6" x="-368" y="8" color="#ff0000"><name x="-378" y="-22">Broken</name></location><location id="id7" x="-72" y="-152"><name x="-82" y="-182">Go</name><label kind="invariant" x="-40" y="-152">crossingTime&lt;=CROSSING_TIME &amp;&amp; queueIndex &gt; 0</label></location><location id="id8" x="-72" y="136"><name x="-82" y="106">Wait</name><label kind="invariant" x="-40" y="112">waitingTime &lt;= MAX_WAITING_TIME</label></location><location id="id9" x="-712" y="-152"><name x="-722" y="-182">emptyGreen</name></location><location id="id10" x="-712" y="136"><name x="-722" y="106">EmptyRed</name></location><init ref="id10"/><transition controllable="false" action=""><source ref="id8"/><target ref="id6"/><label kind="guard" x="-400" y="32">waitingTime &gt;= MAX_WAITING_TIME</label></transition><transition action=""><source ref="id10"/><target ref="id9"/><label kind="synchronisation" x="-952" y="-24">toggleGreen?</label><nail x="-872" y="-16"/></transition><transition controllable="false" action=""><source ref="id9"/><target ref="id7"/><label kind="select" x="-424" y="-352">i : int[0,2]</label><label kind="guard" x="-480" y="-328">queueIndex!= QUEUE_SIZE &amp;&amp; 
location != i</label><label kind="assignment" x="-480" y="-296">queue[location][queueIndex]=i,
waitingTime = 0,
queueIndex++,
crossingTime=0</label><nail x="-400" y="-368"/></transition><transition action=""><source ref="id9"/><target ref="id10"/><label kind="synchronisation" x="-784" y="-24">toggleRed?</label></transition><transition controllable="false" action=""><source ref="id7"/><target ref="id9"/><label kind="guard" x="-512" y="-176">crossingTime&gt;=CROSSING_TIME &amp;&amp; queueIndex == 1</label><label kind="assignment" x="-472" y="-152">queue[location][0]=queue[location][1],
queueIndex--,
waitingTime = 0,
crossingTime=0</label></transition><transition controllable="false" action=""><source ref="id7"/><target ref="id7"/><label kind="guard" x="8" y="-248">crossingTime&gt;=CROSSING_TIME &amp;&amp; queueIndex &gt; 1</label><label kind="assignment" x="16" y="-224">crossingTime=0,
queue[location][0]=queue[location][1],
queueIndex--,
waitingTime=0</label><nail x="48" y="-280"/><nail x="-144" y="-280"/></transition><transition action=""><source ref="id7"/><target ref="id8"/><label kind="guard" x="72" y="-24">crossingTime==0</label><label kind="synchronisation" x="112" y="0">toggleRed?</label><nail x="104" y="8"/></transition><transition controllable="false" action=""><source ref="id8"/><target ref="id8"/><label kind="select" x="112" y="128">i : int[0,2]</label><label kind="guard" x="48" y="160">queueIndex!= QUEUE_SIZE &amp;&amp; 
location != i</label><label kind="assignment" x="72" y="192">queue[location][queueIndex]=i,
queueIndex++</label><nail x="-168" y="264"/><nail x="-168" y="264"/><nail x="0" y="264"/></transition><transition action=""><source ref="id8"/><target ref="id7"/><label kind="synchronisation" x="-136" y="-16">toggleGreen?</label><label kind="assignment" x="-136" y="0">crossingTime=0,
waitingTime = 0</label></transition><transition controllable="false" action=""><source ref="id10"/><target ref="id8"/><label kind="select" x="-440" y="104">i : int[0,2]</label><label kind="guard" x="-448" y="144">queueIndex!= QUEUE_SIZE &amp;&amp; 
location != i</label><label kind="assignment" x="-448" y="176">queue[location][queueIndex]=i,
waitingTime = 0,
queueIndex++</label></transition></template><system>chan pedestrianToggle;
chan carToggleGreen[3];
chan carToggleRed[3];

PedestrianGeneratorEast = PedestrianGenerator(pedestrianToggle);

CarGeneratorEast = CarGeneratorNew(E, carToggleGreen[E], carToggleRed[E]);
CarGeneratorSouth = CarGeneratorNew(S, carToggleGreen[S], carToggleRed[S]);
CarGeneratorWest = CarGeneratorNew(W, carToggleGreen[W], carToggleRed[W]);

LightController1 = LightController(carToggleGreen, carToggleRed, pedestrianToggle);

system PedestrianGeneratorEast,
CarGeneratorEast, CarGeneratorSouth, CarGeneratorWest,
LightController1;</system></nta>